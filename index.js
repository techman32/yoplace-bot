const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const TOKEN = '6258476561:AAG7aPEaNztlrEmxDaPTsb8xO_l8oQKlF_Q'

const bot = new TelegramBot(TOKEN, {
    polling: {
        interval: 300,
        autoStart: true
    }
});

function readJsonFile(filePath) {
    const absolutePath = path.resolve(__dirname, 'data', filePath);
    const fileContent = fs.readFileSync(absolutePath, 'utf8');
    return JSON.parse(fileContent);
}

const cafe = readJsonFile('cafesData.json')
const restaurants = readJsonFile('restaurantsData.json')
const hotels = readJsonFile('hotelsData.json')

bot.on('text', async msg => {
    try {
        if (msg.text === '/start') {
            await bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏—â–µ–º', {
                reply_markup: {
                    keyboard: [
                        ['üßòüèº‚Äç –î–æ—Å—É–≥'],
                        ['üèô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ']
                    ],
                    resize_keyboard: true
                }
            })
        } else if (msg.text === '/menu') {
            await bot.sendMessage(msg.chat.id, '–ú–µ–Ω—é', {
                reply_markup: {
                    keyboard: [
                        ['üßòüèº‚Äç –î–æ—Å—É–≥'],
                        ['üèô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ']
                    ],
                    resize_keyboard: true
                }
            })
        } else if (msg.text === 'üßòüèº‚Äç –î–æ—Å—É–≥') {
            await bot.sendMessage(msg.chat.id, 'üßòüèº‚Äç –î–æ—Å—É–≥', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ì–¥–µ –ø–æ–µ—Å—Ç—å', callback_data: 'food'},
                            {text: '–ì–¥–µ –∑–∞—Å–µ–ª–∏—Ç—å—Å—è', callback_data: 'checkin'}
                        ],
                        [
                            {text: '–ö—É–ª—å—Ç—É—Ä–Ω—ã–π –æ—Ç–¥—ã—Ö', callback_data: 'culture_chill'},
                            {text: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', callback_data: 'entertainment'}
                        ],
                    ]
                }
            })
        } else if (msg.text === 'üèô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ') {
            await bot.sendMessage(msg.chat.id, 'üèô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ä–æ–¥–∞', callback_data: 'history'},
                            {text: '–ö—É–ª—å—Ç—É—Ä–∞', callback_data: 'culture'}
                        ]
                    ]
                }
            })
        } else {
            await bot.sendMessage(msg.chat.id, msg.text);
        }
    } catch (error) {
        console.log(error)
    }
})

bot.on('callback_query', async ctx => {
    try {
        switch (ctx.data) {
            case 'food':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫—É—à–∞—Ç—å', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {text: '–ö–∞—Ñ–µ', callback_data: 'cafes'},
                                {text: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', callback_data: 'restaurants'}
                            ],
                        ],
                        resize_keyboard: true
                    }
                })
                break;
            case 'checkin':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Å–µ–ª–∏—Ç—å—Å—è', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {text: '–û—Ç–µ–ª–∏', callback_data: 'hotels'},
                                {text: '–ì–æ—Å—Ç–∏–Ω–∏—Ü—ã', callback_data: 'hostels'}
                            ],
                        ],
                        resize_keyboard: true
                    }
                })
                break
            case 'culture_chill':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {text: '–ú—É–∑–µ–∏', callback_data: 'museums'},
                                {text: '–¢–µ–∞—Ç—Ä—ã', callback_data: 'theaters'},
                                {text: '–ü–∞—Ä–∫–∏', callback_data: 'parks'},
                            ],
                            [
                                {text: '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', callback_data: 'attractions'}
                            ]
                        ],
                        resize_keyboard: true
                    }
                })
                break
            case 'entertainment':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å—Å—è', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {text: '–ö–≤–µ—Å—Ç—ã', callback_data: 'quests'},
                                {text: '–ë–∞—Ä—ã', callback_data: 'bars'},
                            ],
                            [
                                {text: '–õ–∞—É–Ω–∂ –±–∞—Ä—ã', callback_data: 'loungebars'},
                                {text: '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã', callback_data: 'cinema'}
                            ]
                        ],
                        resize_keyboard: true
                    }
                })
                break
            case 'history':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏ –æ–± –∏—Å—Ç–æ—Ä–∏–∏ –≥–æ—Ä–æ–¥–∞')
                break
            case 'culture':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –∫—É–ª—å—Ç—É—Ä–µ', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {text: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏', callback_data: 'interesting_individuals'},
                            ],
                            [
                                {text: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏', callback_data: 'traditional_holidays'},
                            ]
                        ],
                        resize_keyboard: true
                    }
                })
                break
            case 'cafes':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ', {
                    reply_markup: {
                        inline_keyboard: cafe.map(c => [{
                            text: c.name, callback_data: c.id
                        }]),
                        resize_keyboard: true
                    }
                })
                break
            case 'restaurants':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω', {
                    reply_markup: {
                        inline_keyboard: restaurants.map(c => [{
                            text: c.name, callback_data: c.id
                        }]),
                        resize_keyboard: true
                    }
                })
                break
            case 'hotels':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–µ–ª—å', {
                    reply_markup: {
                        inline_keyboard: hotels.map(c => [{
                            text: c.name, callback_data: c.id
                        }]),
                        resize_keyboard: true
                    }
                })
                break
            case 'hostels':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã')
                break
            case 'museums':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å –º—É–∑–µ–∏')
                break
            case 'theaters':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∞—Ç—Ä—ã')
                break
            case 'parks':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∫–∏')
                break
            case 'attractions':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
                break
            case 'quests':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å –∫–≤–µ—Å—Ç—ã')
                break
            case 'bars':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å –±–∞—Ä—ã')
                break
            case 'loungebars':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å –ª–∞—É–Ω–∂ –±–∞—Ä—ã')
                break
            case 'cinema':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã')
                break
            case 'interesting_individuals':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π')
                break
            case 'traditional_holidays':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendMessage(ctx.message.chat.id, '–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏')
                break

            //cafes
            case 'shkaf':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendPhoto(ctx.message.chat.id, `./images/cafe/${ctx.data}.jpg`, {
                    caption: getDescription(ctx.data, cafe.filter(c => c.id === ctx.data)),
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ù–∞–∑–∞–¥', callback_data: 'cafes'}]
                        ],
                        resize_keyboard: true
                    }
                })
                break
            case 'sangrita':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendPhoto(ctx.message.chat.id, `./images/cafe/${ctx.data}.jpg`, {
                    caption: getDescription(ctx.data, cafe.filter(c => c.id === ctx.data)),
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ù–∞–∑–∞–¥', callback_data: 'cafes'}]
                        ],
                        resize_keyboard: true
                    }
                })
                break
            case 'frendi':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendPhoto(ctx.message.chat.id, `./images/cafe/${ctx.data}.webp`, {
                    caption: getDescription(ctx.data, cafe.filter(c => c.id === ctx.data)),
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ù–∞–∑–∞–¥', callback_data: 'cafes'}]
                        ],
                        resize_keyboard: true
                    }
                })
                break
            case 'malChikago':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendPhoto(ctx.message.chat.id, `./images/cafe/${ctx.data}.webp`, {
                    caption: getDescription(ctx.data, cafe.filter(c => c.id === ctx.data)),
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ù–∞–∑–∞–¥', callback_data: 'cafes'}]
                        ],
                        resize_keyboard: true
                    }
                })
                break

            //restaurants
            case 'monTresor':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendPhoto(ctx.message.chat.id, `./images/restaurants/${ctx.data}.webp`, {
                    caption: getDescription(ctx.data, restaurants.filter(c => c.id === ctx.data)),
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ù–∞–∑–∞–¥', callback_data: 'restaurants'}]
                        ],
                        resize_keyboard: true
                    }
                })
                break
            case 'gosti':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendPhoto(ctx.message.chat.id, `./images/restaurants/${ctx.data}.webp`, {
                    caption: getDescription(ctx.data, restaurants.filter(c => c.id === ctx.data)),
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ù–∞–∑–∞–¥', callback_data: 'restaurants'}]
                        ],
                        resize_keyboard: true
                    }
                })
                break
            case 'mullerHall':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendPhoto(ctx.message.chat.id, `./images/restaurants/${ctx.data}.webp`, {
                    caption: getDescription(ctx.data, restaurants.filter(c => c.id === ctx.data)),
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ù–∞–∑–∞–¥', callback_data: 'restaurants'}]
                        ],
                        resize_keyboard: true
                    }
                })
                break

            //hotels
            case 'firstTrain':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendPhoto(ctx.message.chat.id, `./images/hotels/${ctx.data}.webp`, {
                    caption: getDescription(ctx.data, hotels.filter(c => c.id === ctx.data)),
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ù–∞–∑–∞–¥', callback_data: 'hotels'}]
                        ],
                        resize_keyboard: true
                    }
                })
                break
            case 'amaksCityHotel':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendPhoto(ctx.message.chat.id, `./images/hotels/${ctx.data}.webp`, {
                    caption: getDescription(ctx.data, hotels.filter(c => c.id === ctx.data)),
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ù–∞–∑–∞–¥', callback_data: 'hotels'}]
                        ],
                        resize_keyboard: true
                    }
                })
                break
            case 'revizor':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendPhoto(ctx.message.chat.id, `./images/hotels/${ctx.data}.webp`, {
                    caption: getDescription(ctx.data, hotels.filter(c => c.id === ctx.data)),
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ù–∞–∑–∞–¥', callback_data: 'hotels'}]
                        ],
                        resize_keyboard: true
                    }
                })
                break
            case 'nikitin':
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id)
                await bot.sendPhoto(ctx.message.chat.id, `./images/hotels/${ctx.data}.webp`, {
                    caption: getDescription(ctx.data, hotels.filter(c => c.id === ctx.data)),
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: '–ù–∞–∑–∞–¥', callback_data: 'hotels'}]
                        ],
                        resize_keyboard: true
                    }
                })
                break

            //hostels
        }
    } catch (error) {
        console.log(error);
    }
})

function getDescription(id, data) {
    return `\n${data.map(c => c.name)}\n–ê–¥—Ä–µ—Å: ${data.map(c => c.address)}\n–†–µ–π—Ç–∏–Ω–≥: ${data.map(c => c.rating)}\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${data.map(c => c.geoPosition)}\n–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: ${data.map(c => c.timetable)}`
}